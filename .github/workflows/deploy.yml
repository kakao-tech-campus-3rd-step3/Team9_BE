name: PADO Backend CI/CD

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Run tests with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: test

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build -x test --parallel --configure-on-demand

      - name: Get current git commit hash
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/pado-app:${{ steps.vars.outputs.sha_short }}
            ${{ secrets.DOCKERHUB_USERNAME }}/pado-app:latest

      - name: Deploy to EC2
        if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            DOCKER_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            APP_NAME=pado-app
            IMAGE_TAG=${{ steps.vars.outputs.sha_short }}

            sudo docker pull $DOCKER_USERNAME/$APP_NAME:$IMAGE_TAG

            CURRENT_CONTAINER_ID=$(cat /home/ubuntu/current_container.txt || echo "")

            NEW_CONTAINER_ID=$(sudo docker run -d --network="host" \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e DB_URL=${{ secrets.DB_URL }} \
              -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              $DOCKER_USERNAME/$APP_NAME:$IMAGE_TAG)
            
            echo $NEW_CONTAINER_ID > /home/ubuntu/current_container.txt

            echo "Waiting for 15 seconds for the new container to start..."
            sleep 15

            if [ ! -z "$CURRENT_CONTAINER_ID" ]; then
              echo "Stopping and removing the old container: $CURRENT_CONTAINER_ID"
              sudo docker stop $CURRENT_CONTAINER_ID || true
              sudo docker rm $CURRENT_CONTAINER_ID || true
            else
              echo "No old container to stop."
            fi
            
            sudo docker image prune -f