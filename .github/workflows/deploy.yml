name: PADO Backend CI/CD

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Run tests with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: test
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build -x test --parallel --configure-on-demand
      - name: Get current git commit hash
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/pado-app:${{ steps.vars.outputs.sha_short }}
            ${{ secrets.DOCKERHUB_USERNAME }}/pado-app:latest

      - name: Deploy to EC2
        # 디버깅을 위해 PR 생성 시에도 배포가 실행되도록 조건을 임시로 변경
        # 원래 조건: if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
        if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/develop')
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            DOCKER_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            APP_NAME=pado-app
            IMAGE_TAG=${{ steps.vars.outputs.sha_short }}
            NGINX_CONF_PATH="/etc/nginx/sites-available/pado"

            CURRENT_PORT=$(grep -oP '(?<=server 127.0.0.1:)\d+' $NGINX_CONF_PATH)
            
            if [ "$CURRENT_PORT" = "8081" ]; then
              TARGET_PORT=8082
            else
              TARGET_PORT=8081
            fi
            
            echo "Current Port: $CURRENT_PORT, Target Port for New Container: $TARGET_PORT"
            
            sudo docker pull $DOCKER_USERNAME/$APP_NAME:$IMAGE_TAG
            
            NEW_CONTAINER_ID=$(sudo docker run -d -p ${TARGET_PORT}:8080 \
              --add-host host.docker.internal:host-gateway \
              -e SPRING_PROFILES_ACTIVE=prod \
              -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }} \
              -e AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }} \
              $DOCKER_USERNAME/$APP_NAME:$IMAGE_TAG)
            
            echo "New container ($NEW_CONTAINER_ID) started on port $TARGET_PORT. Starting health check..."
            
            sleep 10

            HEALTH_CHECK_URL=http://localhost:${TARGET_PORT}/actuator/health
            HEALTH_CHECK_PASSED=false
            for i in $(seq 1 12); do
              echo "Health check attempt #$i..."
              # --fail 옵션은 HTTP 상태 코드가 200번대가 아니면 실패로 처리합니다.
              if curl -s --fail $HEALTH_CHECK_URL > /dev/null; then
                echo "Health check PASSED."
                HEALTH_CHECK_PASSED=true
                break
              fi
              sleep 5
            done
            
            if [ "$HEALTH_CHECK_PASSED" = true ]; then
              echo "Deployment successful. Switching Nginx to port $TARGET_PORT."
            
              sudo sed -i "s/server 127.0.0.1:.*/server 127.0.0.1:${TARGET_PORT};/" $NGINX_CONF_PATH
            
              sudo systemctl reload nginx
            
              echo "Nginx reloaded. Stopping old container on port $CURRENT_PORT."
            
              OLD_CONTAINER_ID=$(sudo docker ps -q --filter "publish=${CURRENT_PORT}")
              if [ ! -z "$OLD_CONTAINER_ID" ]; then
                sudo docker stop $OLD_CONTAINER_ID
                sudo docker rm $OLD_CONTAINER_ID
              fi
            
              sudo docker image prune -f
              exit 0
            else
              echo "Health check FAILED. Displaying logs before rollback."

              # Health Check 실패의 상세 원인을 파악하기 위해 /actuator/health 엔드포인트의 실제 응답을 출력합니다.
              echo "--- Health check endpoint response ---"
              curl -s $HEALTH_CHECK_URL
              echo
              echo "------------------------------------"

              echo "--- Logs from container $NEW_CONTAINER_ID ---"
              sudo docker logs $NEW_CONTAINER_ID
              echo "-------------------------------------------"
            
              echo "Rolling back deployment..."
              sudo docker stop $NEW_CONTAINER_ID
              sudo docker rm $NEW_CONTAINER_ID
              exit 1
            fi
